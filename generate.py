import json
#import os
from pathlib import Path

def generate_pipeline():
    # Load JSON config
    with open("cicd-blueprint.json") as f:
        config = json.load(f)
    
    # Create .github/  workflows if missing
    workflows_dir = Path(".github/workflows")
    workflows_dir.mkdir(parents=True, exist_ok=True)
    
    # Generate pipeline.yml   
    pipeline = {
        "name": "CI/CD Pipeline",
        "on": {"push": {}},
        "jobs": {}
    }

    # Add build steps
    for step in config["build_steps"]:
        template_path = f"templates/{config['technology']}/{step}.yml"
        with open(template_path) as t:
            pipeline["jobs"][step] = {
                "runs-on": "ubuntu-latest",
                "steps": [
                    {"uses": "actions/checkout@v4"},
                    {"name": f"Run {step}", "run": t.read().strip()}
                ]
            }

    # Add deployment
    with open(f"templates/deployment/{config['deploy_method']}.yml") as d:
        pipeline["jobs"]["deploy"] = {
            "needs": config["build_steps"],
            "runs-on": "ubuntu-latest",
            "steps": [
                {"uses": "actions/checkout@v4"},
                {"name": "Deploy", "run": d.read().strip()}
            ]
        }

    # Write YAML pipeline
    with open(workflows_dir / "pipeline.yml", "w") as f:
        f.write("# Auto-generated by CI Generator\n")
        f.write("name: CI/CD Pipeline\n")
        f.write("on: {push: {}}\n\n")
        f.write("jobs:\n")
        for job_name, job_config in pipeline["jobs"].items():
            f.write(f"  {job_name}:\n")
            f.write(f"    runs-on: {job_config['runs-on']}\n")
            if "needs" in job_config:
                f.write(f"    needs: {job_config['needs']}\n")
            f.write("    steps:\n")
            for step in job_config["steps"]:
                f.write(f"      - {step}\n")

if __name__ == "__main__":
    generate_pipeline()